# Паттерн адаптер
# Адаптер — это один из структурных паттернов, из названия которого исходит его
# и назначения. По сути это типичный переходник для разных интерфейсов или данных.
# 1. Адаптер имеет интерфейс, который совместим с одним из объектов.
# 2. Поэтому этот объект может свободно вызывать методы адаптера.
# 3. Адаптер получает эти вызовы и перенаправляет их второму объекту, но уже
# в том формате и последовательности, которые понятны второму объекту.
#
# Вырожденная форма адаптера — двухсторонний адаптер.
# Нефизические примеры из жизни — это например система СМЭВ, которая предоставляет
# сервисы для получения/ обмена информацией.
# Однако для работы вашего приложения со СМЭВ нужны адаптеры на вашей стороне,
# которые могут воспринимать данные, полученные со стороны СМЭВ, переводя их в объекты,
# понятные вашей системе.



# Устаревший интерфейс
class OldSystem:
    def request(self):
        print("Вызов устаревшего метода OldSystem.request()")


# Новый интерфейс
class NewSystem:
    def specific_request(self):
        print("Вызов нового метода NewSystem.specific_request()")


# Адаптер, который преобразует OldSystem к NewSystem
class Adapter(NewSystem):
    def __init__(self, old_system):
        self.old_system = old_system

    def specific_request(self):
        self.old_system.request()


if __name__ == "__main__":
    old_system = OldSystem()
    new_system = NewSystem()

    # Используем OldSystem через адаптер в новой системе
    adapter_system = Adapter(old_system)

    new_system.specific_request()
    adapter_system.specific_request()
